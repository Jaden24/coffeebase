package sodabase.services;

import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Base64;
import java.util.Random;

import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.swing.JOptionPane;

public class UserService {
	private static final Random RANDOM = new SecureRandom();
	private static final Base64.Encoder enc = Base64.getEncoder();
	private static final Base64.Decoder dec = Base64.getDecoder();
	private DatabaseConnectionService dbService = null;

	public UserService(DatabaseConnectionService dbService) {
		this.dbService = dbService;
	}

	public boolean useApplicationLogins() {
		return true;
	}
	
	public boolean login(String username, String password) {
		//TODO: Complete this method.
		String enteredHashPassword;
		byte[] correctSalt;
		String correctHashPassword;
		String preparedQuery;
		Connection connection = null;
		try {
			connection = this.dbService.getConnection();
			preparedQuery = "SELECT PasswordHash, PasswordSalt\n FROM [User]\n WHERE Username = ?";
			PreparedStatement stmt = connection.prepareStatement(preparedQuery);
			String currentUsername = username;
			stmt.setString(1, currentUsername);
			ResultSet result = stmt.executeQuery();
			correctHashPassword = result.getString("PasswordHash");
			correctSalt = result.getBytes("passwordSalt");
			enteredHashPassword = hashPassword(correctSalt, password);
			if(enteredHashPassword.equals(correctHashPassword)) {
				return true;
			}
			else {
				JOptionPane.showMessageDialog(null, "Login Failed");
				return false;
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(null, "Login Failed");
			return false;
		}
		finally{
			
		}
		
	}

	public boolean register(String username, String password) {
		//TODO: Task 6
		byte[] newSalt = getNewSalt();
		String newPassword = hashPassword(newSalt, password);
		Connection connection = null;	
		// TODO: Task 3 and Task 4

		try {
			connection = this.dbService.getConnection();
			CallableStatement stmt = connection.prepareCall("{? = call Register(?, ?, ?)}");
			stmt.registerOutParameter(1, Types.INTEGER);
			stmt.setString(2, username);
			stmt.setBytes(3, newSalt);
			stmt.setString(4, newPassword);
			Boolean results = stmt.execute();
			int returnCode = stmt.getInt(1);
			if (returnCode == 1) {
				JOptionPane.showMessageDialog(null, "Username cannot be null or empty.");
			} else if (returnCode == 2) {
				JOptionPane.showMessageDialog(null, "PasswordSalt cannot be null or empty.");
			} else if (returnCode == 3) {
				JOptionPane.showMessageDialog(null, "PasswordHash cannot be null or empty.");
			} else if (returnCode == 4) {
				JOptionPane.showMessageDialog(null, "Username already exists.");
			}else {
				JOptionPane.showMessageDialog(null,
						"Successfully Registered with " + username + ", " + newSalt + ", " + newPassword);
				return true;
			}
			return results;
		} catch (SQLException e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(null, "Registeration Failed");
			return false;
		} finally {
			// close connection
			this.dbService.closeConnection();
		}
	}
	
	public byte[] getNewSalt() {
		byte[] salt = new byte[16];
		RANDOM.nextBytes(salt);
		return salt;
	}
	
	public String getStringFromBytes(byte[] data) {
		return enc.encodeToString(data);
	}

	public String hashPassword(byte[] salt, String password) {

		KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 65536, 128);
		SecretKeyFactory f;
		byte[] hash = null;
		try {
			f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
			hash = f.generateSecret(spec).getEncoded();
		} catch (NoSuchAlgorithmException e) {
			JOptionPane.showMessageDialog(null, "An error occurred during password hashing. See stack trace.");
			e.printStackTrace();
		} catch (InvalidKeySpecException e) {
			JOptionPane.showMessageDialog(null, "An error occurred during password hashing. See stack trace.");
			e.printStackTrace();
		}
		return getStringFromBytes(hash);
	}

}